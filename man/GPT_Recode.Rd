% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recode.R
\name{GPT_Recode}
\alias{GPT_Recode}
\title{Recode Cell Values Using GPT with Robust Error Handling}
\usage{
GPT_Recode(
  prompt,
  cell,
  sysprompt =
    "You are a helpful assistant that recodes dataframe values. Return only the transformed value.",
  model = "gpt-4o",
  temperature = 0.8,
  max_tokens = 1000,
  max_retries = 3,
  retry_delay = 1,
  validate = TRUE
)
}
\arguments{
\item{prompt}{A character string specifying the transformation or recoding instruction (e.g., "Translate to French"). This guides the GPT model on how to process the input value.}

\item{cell}{A character string containing the value to be recoded or transformed by the GPT model.}

\item{sysprompt}{An optional system prompt that directs the behavior of the GPT model. Default is "You are a helpful assistant that recodes dataframe values. Return only the transformed value." This helps ensure consistent and focused responses.}

\item{model}{The GPT model to use for the transformation. Default is "gpt-4o". Alternative options include "gpt-3.5-turbo".}

\item{temperature}{A numeric value controlling the randomness of the GPT output, ranging from 0 (most deterministic) to 2 (most random). Default is 0.8, balancing creativity and consistency.}

\item{max_tokens}{An integer specifying the maximum length of the GPT response in tokens. Default is 1000.}

\item{max_retries}{An integer specifying the maximum number of retry attempts if the API call fails. Default is 3.}

\item{retry_delay}{An integer specifying the number of seconds to wait between retry attempts. Default is 1.}

\item{validate}{A boolean indicating whether to perform input validation before making the API call. Default is TRUE.}
}
\value{
Returns a character string containing the recoded or transformed value as generated by the GPT model. If the operation fails, it returns NA.
}
\description{
This function leverages OpenAI's GPT models to recode or transform individual cell values in a dataframe based on a user-provided prompt. It includes robust error handling, input validation, and retry logic to ensure reliable operation even in the face of API failures or rate limits.
}
\details{
The function workflow includes:
1. Validating all input parameters to ensure correctness.
2. Checking for the presence of a valid OpenAI API key in environment variables.
3. Making the API call to the GPT model with retry logic on failure.
4. Handling various error conditions gracefully, including rate limiting and network issues.
5. Returning the transformed value or NA if the operation cannot be completed.
}
\note{
This function requires the 'openai' R package and a valid OPENAI_API_KEY environment variable to function. For bulk or large-scale operations, additional rate limiting or batching strategies may be necessary to avoid API throttling.
}
\examples{
\dontrun{
# Set your OpenAI API key
Sys.setenv(OPENAI_API_KEY = "your-key-here")

# Example: Simple translation
GPT_Recode("Translate to French", "Hello world")

# Example: Extract the main verb from a sentence
GPT_Recode("Extract the main verb", "The cat sat on the mat")
}
}
